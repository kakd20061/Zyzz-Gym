// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZyzzGymOriginal.Data;

#nullable disable

namespace ZyzzGymOriginal.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221125163340_User Achevements Relation")]
    partial class UserAchevementsRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.AchievementsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseForeignKey")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserForeignKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseForeignKey");

                    b.HasIndex("UserForeignKey");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.AnnouncementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9771),
                            Description = "In cooperation with the kfd company, new whey protein flavors are available in our store!",
                            PhotoUrl = "https://a.allegroimg.com/s1024/0c35f7/641f676d4bf5b3f5b02baa7a23b9",
                            Title = "New whey protein falvours",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9772)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9788),
                            Description = "In cooperation with the Olimp company, new whey protein complex are available in our store. Check this out!",
                            PhotoUrl = "https://static.pepper.pl/threads/raw/RGwF5/582471_1/re/1600x900/qt/60/582471_1.jpg",
                            Title = "New delivery of WPC",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9788)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9796),
                            Description = "We are happy to say that we have got new modern gym equipment",
                            PhotoUrl = "https://www.ironcompany.com/media/mf_webp/jpg/media/catalog/product/cache/e2c8244c5972c0e74c812d913143823a/l/e/legend-selectedge-1124-multi-press-xlg.webp",
                            Title = "New gym equipment",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9796)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9805),
                            Description = "We bought some more plates to avoid fights for gains!",
                            PhotoUrl = "https://kronos-shop.pl/pol_pl_HMS-Talerz-Olimpijski-Gumowany-Obciazenie-20-kg-12442_2.jpg",
                            Title = "More plates on the gym",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9805)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9812),
                            Description = "Sadly We must announce that gym will be closed at 1st December due to technical break :(",
                            PhotoUrl = "https://www.klubfitness.njn.pl/photos/40217/235965916_1906319619541469_7780126213647886945_n.jpg.jpg",
                            Title = "Gym will be closed at 1st December",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9813)
                        });
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.ExerciseNameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ExerciseName");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9827),
                            Name = "Bench Press",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9827)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9843),
                            Name = "Shoulder Press",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9843)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9851),
                            Name = "Squat",
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9852)
                        });
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.PricingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PassTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pricing");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9675),
                            Description = "You can train when and how much you want!",
                            PassTypeName = "24/7 Gym Pass",
                            Price = 29.99f,
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9678)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9707),
                            Description = "You can train only at night (21:00 - 06:00)!",
                            PassTypeName = "Night Gym Pass",
                            Price = 14.99f,
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9708)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9751),
                            Description = "You can train when and how much you want! Money will be deducted automatically. If you choose this option, you must have a bank account.",
                            PassTypeName = "24/7 Self-renewable Gym Pass",
                            Price = 19.99f,
                            UpdatedAt = new DateTime(2022, 11, 25, 16, 33, 39, 789, DateTimeKind.Utc).AddTicks(9752)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.AchievementsEntity", b =>
                {
                    b.HasOne("ZyzzGymOriginal.Data.ExerciseNameEntity", "ExerciseName")
                        .WithMany("Achievements")
                        .HasForeignKey("ExerciseForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserForeignKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseName");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZyzzGymOriginal.Areas.Identity.Pages.Account.NewIdentityUser", b =>
                {
                    b.Navigation("Achievements");
                });

            modelBuilder.Entity("ZyzzGymOriginal.Data.ExerciseNameEntity", b =>
                {
                    b.Navigation("Achievements");
                });
#pragma warning restore 612, 618
        }
    }
}
